cmake_minimum_required(VERSION 3.0.0)
project(playground)

set_property(GLOBAL PROPERTY USE_FOLDERS ON)

include_directories ("${PROJECT_SOURCE_DIR}/src/include")

# external submodules
include_directories ("${PROJECT_SOURCE_DIR}/contrib/testinator/src/include")

include_directories("${PROJECT_SOURCE_DIR}/contrib/assert/include")
include_directories("${PROJECT_SOURCE_DIR}/contrib/config/include")
include_directories("${PROJECT_SOURCE_DIR}/contrib/concept_check/include")
include_directories("${PROJECT_SOURCE_DIR}/contrib/core/include")
include_directories("${PROJECT_SOURCE_DIR}/contrib/detail/include")
include_directories("${PROJECT_SOURCE_DIR}/contrib/function_types/include")
include_directories("${PROJECT_SOURCE_DIR}/contrib/functional/include")
include_directories("${PROJECT_SOURCE_DIR}/contrib/fusion/include")
include_directories("${PROJECT_SOURCE_DIR}/contrib/integer/include")
include_directories("${PROJECT_SOURCE_DIR}/contrib/iterator/include")
include_directories("${PROJECT_SOURCE_DIR}/contrib/math/include")
include_directories("${PROJECT_SOURCE_DIR}/contrib/move/include")
include_directories("${PROJECT_SOURCE_DIR}/contrib/mpl/include")
include_directories("${PROJECT_SOURCE_DIR}/contrib/optional/include")
include_directories("${PROJECT_SOURCE_DIR}/contrib/predef/include")
include_directories("${PROJECT_SOURCE_DIR}/contrib/preprocessor/include")
include_directories("${PROJECT_SOURCE_DIR}/contrib/range/include")
include_directories("${PROJECT_SOURCE_DIR}/contrib/regex/include")
include_directories("${PROJECT_SOURCE_DIR}/contrib/smart_ptr/include")
include_directories("${PROJECT_SOURCE_DIR}/contrib/spirit/include")
include_directories("${PROJECT_SOURCE_DIR}/contrib/static_assert/include")
include_directories("${PROJECT_SOURCE_DIR}/contrib/tti/include")
include_directories("${PROJECT_SOURCE_DIR}/contrib/throw_exception/include")
include_directories("${PROJECT_SOURCE_DIR}/contrib/type_index/include")
include_directories("${PROJECT_SOURCE_DIR}/contrib/type_traits/include")
include_directories("${PROJECT_SOURCE_DIR}/contrib/typeof/include")
include_directories("${PROJECT_SOURCE_DIR}/contrib/utility/include")
include_directories("${PROJECT_SOURCE_DIR}/contrib/variant/include")

# Testing
include(CTest)
enable_testing()

# Pipe separate tests into ctest
# Adapted from https://github.com/elbeno/skeleton/blob/master/CMakeLists.txt
macro(ADD_INDIVIDUAL_TESTS executable type suffix)
  set(test_path $ENV{PATH})
  get_target_property(target_files ${executable} SOURCES)
  foreach(source ${target_files})
    string(REGEX MATCH .*cpp source "${source}")
    if(source)
      file(READ "${source}" contents)
      string(REGEX MATCHALL "DEF_${type}[ ]*[(][ ]*[^, ]+[ ]*,[ ]*[^,) ]+[ ]*[),]" found_tests ${contents})
      foreach(hit ${found_tests})
        string(REGEX REPLACE "DEF_${type}[ ]*[(][ ]*([^, ]+)[ ]*,[ ]*[^,) ]+[ ]*[),]" "\\1" tname ${hit})
        string(REGEX REPLACE "DEF_${type}[ ]*[(][ ]*[^, ]+[ ]*,[ ]*([^,) ]+)[ ]*[),]" "\\1" sname ${hit})
        set(test_name ${executable}.${sname}.${tname}${suffix})
        add_test(NAME ${test_name}
          COMMAND "${executable}" --testName=${tname}${suffix} --suiteName=${sname})
        set_tests_properties(${test_name} PROPERTIES TIMEOUT 30 ENVIRONMENT "PATH=${test_path}")
      endforeach()
    endif()
  endforeach()
endmacro()

macro(ADD_TESTINATOR_TESTS executable)
  ADD_INDIVIDUAL_TESTS(${executable} "TEST" "")
  ADD_INDIVIDUAL_TESTS(${executable} "TIMED_TEST" "")
  ADD_INDIVIDUAL_TESTS(${executable} "PROPERTY" "Property")
  ADD_INDIVIDUAL_TESTS(${executable} "COMPLEXITY_PROPERTY" "ComplexityProperty")
endmacro()

add_subdirectory (src/lib)
add_subdirectory (src/test)
