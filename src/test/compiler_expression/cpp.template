{% 
function writeEncoder(data, type) %}
{{type}}& operator<<({{type}}& encoder, const {{data.name}}& data)
{ {%
    for _, attribute in pairs(data.attributes) do
        %}{{string.format("\n    encoder << data.%s;", attribute.name)}}{%
    end
%}
    return encoder;
}
{%
end

function writeDecoder(data, type) %}
{{type}}& operator>>({{type}}& decoder, const {{data.name}}& data)
{ {%
    for _, attribute in pairs(data.attributes) do
        %}{{string.format("\n    decoder >> data.%s;", attribute.name)}}{%
    end
%}
    return decoder;
}
{%
end

function getNamespace()
    local namespace, file = module.name:match('(.*)%.(.*)')
    return namespace:gsub("%.", "::");
end

function printIncludeHpp()
    local namespace, file = module.name:match('(.*)%.(.*)')
    %}{{file}}{%
end

%}#include "{% printIncludeHpp() %}.hpp"
#include <flatmessage.hpp>

using namespace {{getNamespace()}};
{%
for _,data in pairs(data) do 
    writeEncoder(data, "BinaryEncoder")
    writeDecoder(data, "BinaryDecoder")
end 

for _,msg in pairs(messages) do
    writeEncoder(msg, "BinaryEncoder")
    writeDecoder(msg, "BinaryDecoder")
end
%}